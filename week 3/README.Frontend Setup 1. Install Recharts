import axios from 'axios';
import { useState } from 'react';
import {
  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, PieChart, Pie, Cell, LineChart, Line, Legend
} from 'recharts';

const COLORS = ['#8884d8', '#82ca9d', '#ffc658', '#ff7300', '#0088FE'];

export default function Upload() {
  const [file, setFile] = useState(null);
  const [data, setData] = useState([]);
  const [xKey, setXKey] = useState('');
  const [yKey, setYKey] = useState('');
  const [chartType, setChartType] = useState('Bar');

  const handleUpload = async (e) => {
    e.preventDefault();
    const formData = new FormData();
    formData.append("file", file);

    const res = await axios.post("http://localhost:5000/api/upload", formData);
    setData(res.data.data);
    const keys = Object.keys(res.data.data[0]);
    setXKey(keys[0]);
    setYKey(keys[1]);
  };

  const renderChart = () => {
    if (!xKey || !yKey) return null;

    switch (chartType) {
      case 'Bar':
        return (
          <BarChart width={600} height={300} data={data}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey={xKey} />
            <YAxis />
            <Tooltip />
            <Legend />
            <Bar dataKey={yKey} fill="#8884d8" />
          </BarChart>
        );
      case 'Line':
        return (
          <LineChart width={600} height={300} data={data}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey={xKey} />
            <YAxis />
            <Tooltip />
            <Legend />
            <Line type="monotone" dataKey={yKey} stroke="#8884d8" />
          </LineChart>
        );
      case 'Pie':
        return (
          <PieChart width={400} height={400}>
            <Pie data={data} dataKey={yKey} nameKey={xKey} cx="50%" cy="50%" outerRadius={120} label>
              {data.map((_, index) => (
                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
              ))}
            </Pie>
            <Tooltip />
          </PieChart>
        );
      default:
        return null;
    }
  };

  return (
    <div>
      <form onSubmit={handleUpload}>
        <input type="file" accept=".xlsx,.csv" onChange={e => setFile(e.target.files[0])} />
        <button type="submit">Upload</button>
      </form>

      {data.length > 0 && (
        <>
          <div style={{ marginTop: 20 }}>
            <label>Chart Type:</label>
            <select onChange={e => setChartType(e.target.value)} value={chartType}>
              <option value="Bar">Bar</option>
              <option value="Line">Line</option>
              <option value="Pie">Pie</option>
            </select>
            <label>X-Axis:</label>
            <select onChange={e => setXKey(e.target.value)} value={xKey}>
              {Object.keys(data[0]).map((key, i) => <option key={i}>{key}</option>)}
            </select>
            <label>Y-Axis:</label>
            <select onChange={e => setYKey(e.target.value)} value={yKey}>
              {Object.keys(data[0]).map((key, i) => <option key={i}>{key}</option>)}
            </select>
          </div>
          <div style={{ marginTop: 20 }}>
            {renderChart()}
          </div>
        </>
      )}
    </div>
  );
}
